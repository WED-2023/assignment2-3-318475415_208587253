openapi: 3.0.0
info:
  title: Recipes website API
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: user
  description: All the user's personal app info
- name: recipe
  description: All reciepes general info
- name: auth
  description: All authentication related routes
paths:
  /register:
    post:
      tags:
      - auth
      summary: Register a new user
      description: |
        This endpoint allows a new user to register by providing their details.
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Invalid input parameters
  /login:
    post:
      tags:
      - auth
      summary: Login a user
      description: |
        This endpoint allows a user to login by providing their username and password.
      operationId: getLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
      - auth
      summary: Logout a user
      description: This endpoint allows a user to logout.
      operationId: logoutUser
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /random:
    get:
      tags:
      - recipe
      summary: Get three random recipes
      description: |
        This endpoint retrieves three random recipes from the database.
      operationId: getRandomRecipes
      parameters:
      - name: limit
        in: query
        description: Number of random recipes to retrieve
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 3
      responses:
        "200":
          description: Successfully retrieved random recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "400":
          description: Recipes not found
  /search:
    get:
      tags:
      - recipe
      summary: Search recipes
      description: |
        This endpoint allows searching for recipes with option to limit, filter and sort.
      operationId: searchRecipes
      parameters:
      - name: title
        in: query
        description: Title of the recipe to search for
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: dish
        in: query
        description: Dish to search for
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: diet
        in: query
        description: "Diet type to filter recipes from an enum (e.g., vegetarian, vegan)"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: cuisine
        in: query
        description: "Cuisine type to filter recipes from an enum (e.g., Italian, Mexican)"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: intolerance
        in: query
        description: "Intolerance type to filter recipes from an enum (e.g., gluten-free, dairy-free)"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sortBy
        in: query
        description: Sort recipes by popularity or preparation time
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - popularity
          - preparationTime
      - name: limit
        in: query
        description: Number of recipes to return (default is 5)
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 5
          enum:
          - 5
          - 10
          - 15
      responses:
        "200":
          description: Successfully retrieved matching recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "400":
          description: Invalid input parameters
        "404":
          description: No recipes found
  /user/FavoriteRecipes:
    get:
      tags:
      - user
      summary: Return the favorite recipes that were saved by the user
      responses:
        "200":
          description: return the user's favorites recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "401":
          description: user is not authorized
      security:
        - cookieAuth: []
    post:
      tags:
      - user
      summary: save recipe as favorite
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429      
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /user/ViewedRecipes:
    post:
      tags:
      - user
      summary: mark recipe as viewed
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: recipre's id which the user viewed
                  example: 716429
      responses:
        "201":
          description: The recipe successfully saved as favorite
  /user/LastViewedRecipes:
    get:
      tags:
      - user
      summary: Get last viewed recipes
      description: Retrieve the 3 most recently viewed recipes.
      operationId: getLastViewedRecipes
      responses:
        "200":
          description: Successfully retrieved last viewed recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "404":
          description: No recipes found
  /user/MyRecipes:
    get:
      tags:
      - user
      summary: Return the recipes that were created by the user
      responses:
        "200":
          description: return the user's recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
    post:
      tags:
      - user
      summary: Create a new recipe for the user
      requestBody:
        description: The recipe to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        "201":
          description: Recipe created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        "401":
          description: Unauthorized
  /user/LastSearched:
    get:
      tags:
      - user
      summary: Get last searched recipe for logged-in user
      description: Retrieve the last recipe searched by the logged-in user.
      operationId: getLastSearchedRecipe
      responses:
        "200":
          description: Successfully retrieved last searched recipe
          content:
            application/json:
              schema:
                type: string
                example: Spaghetti Carbonara
      security:
      - bearerAuth: []
  /recipes/{recipeId}:
    get:
      tags:
      - recipe
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
components:
  schemas:
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: johnDoe
        password: Password1!
    User:
      required:
      - country
      - email
      - firstName
      - lastName
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          pattern: "^[a-zA-Z]{3,8}$"
          type: string
          description: "Username containing only letters, 3-8 characters long, and uniqe."
          example: johnDoe
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        country:
          type: string
          example: USA
          enum:
          - countries from https://restcountries.com/v3.1/all
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          maxLength: 10
          minLength: 5
          format: password
          pattern: "^(?=.[0-9])(?=.[!@#$%^&])[a-zA-Z0-9!@#$%^&]{5,10}$"
          type: string
          description: "Password should be 5-10 characters long, include at least one number and one special character."
          example: Password1!
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
    Recipe:
      required:
      - glutenFree
      - imageUrl
      - ingredients
      - instructions
      - readyInMinutes
      - servings
      - summary
      - title
      - vegan
      - vegetarian
      type: object
      properties:
        # id:
        #   type: integer
        #   description: recipe identifier
        #   example: 102
        title:
          type: string
          description: The title of the recipe
          example: Spaghetti Carbonara
        imageURL:
          type: string
          description: URL of the recipe image
          format: URL
          example: http://example.com/spaghetti.jpg
        readyInMinutes:
          type: integer
          description: Time required to prepare the recipe in minutes
          example: 30
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: Indicates if the recipe is vegetarian
          example: 0
        vegan:
          type: boolean
          description: Indicates if the recipe is vegan
          example: 0
        glutenFree:
          type: boolean
          description: Indicates if the recipe is gluten-free
          example: 0
        summary:
          type: string
          description: Summary of the recipe
          example: A classic Italian pasta dish.
        instructions:
          type: string
          description: Instructions to prepare the recipe
          example: 1. Boil pasta. 2. Cook bacon. 3. Mix eggs and cheese. 4. Combine all.
        ingredients:
          type: string
          description: "List of ingredients with name, amount, and units"
          example: "1 cup sugar"
        servings:
          type: integer
          description: Number of servings the recipe provides
          example: 2
